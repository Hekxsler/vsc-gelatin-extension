{
    "do": {
        "skip": "Skip the current match and jump back to the top of the current grammar block.",
        "next": "Skip the current match and continue with the next match statement without jumping back to the top of the current grammar block.\n\n\nThis function is rarely used and probably not what you want. Instead, use do.skip() in almost all cases, unless it is for some performance-specific hacks.",
        "say": "Prints the given string to stdout with additional debug information.",
        "fail": "Prints the given string to stdout with additional debug information and immediately terminates with an error.",
        "return": "Immediately leave the current grammar block and return to the calling function. When used at the top level (i.e. in the input grammar), stop parsing."
    },
    "out": {
        "create": "Creates the leaf node (and attributes) at the given path, regardless of whether or not it already exists.\n\n\nUsing this function twice will lead to duplicates. If the given path contains multiple elements, the parent nodes are only created if they do not yet exist.",
        "add": "Appends the string to the text of the node at the given path if it already exists.\n\n\nOtherwise it behaves like `out.create()`.",
        "replace": "Replaces the nodes (and attributes) in the given path if they already exist.\n\n\nOtherwise it behaves like `out.create()`.",
        "open": "Selects the addressed node, such that the PATH of all subsequent function calls is relative to the selected node until the end of the match block is reached.\n\n\nOtherwise it behaves like `out.create()`.",
        "enter": "Creates the nodes in the given path if they do not already exist.\n\n\nOtherwise it behaves like `out.open()`.",
        "add_attribute": "Adds the attribute with the given name and value to the node with the given path.",
        "enqueue_after": "Is executed after the given regular expression matches the input and the next match statement was processed.\n\n\nOtherwise it behaves like `out.enqueue_before()`.",
        "enqueue_before": "Is executed as soon as the given regular expression matches the input, regardless of the grammar in which the match occurs.\n\n\nOtherwise it behaves like `out.add()`.",
        "enqueue_on_add": "Is executed after the given regular expression matches the input and the next node is added to the output.\n\n\nOtherwise it behaves like `out.enqueue_before()`.",
        "set_root_name": "Specifies the name of the root tag, if the output is XML.\n\n\nHas **NO** effect on JSON and YAML output."
    }
}
